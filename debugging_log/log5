Sat Aug 26 21:14:13 EDT 2017
+b MyMalloc.c:336
Breakpoint 1 at 0x40115a: file MyMalloc.c, line 336.
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 1, malloc (size=1024) at MyMalloc.c:336
336	  increaseMallocCalls();
+n
338	  return allocateObject(size);
+n
339	}
+n
__GI__IO_file_doallocate (fp=0x7ffff7dd2620 <_IO_2_1_stdout_>) at filedoalloc.c:129
129	filedoalloc.c: No such file or directory.
+n
128	in filedoalloc.c
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 1, malloc (size=1024) at MyMalloc.c:336
336	  increaseMallocCalls();
+n
338	  return allocateObject(size);
+n
339	}
+n
__GI__IO_file_doallocate (fp=0x7ffff7dd2620 <_IO_2_1_stdout_>) at filedoalloc.c:129
129	filedoalloc.c: No such file or directory.
+n
128	in filedoalloc.c
+n
130	in filedoalloc.c
+n
131	in filedoalloc.c
+info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000040115a in malloc at MyMalloc.c:336
	breakpoint already hit 1 time
+d 1
+b 13
Breakpoint 2 at 0x7ffff7a7a240: file filedoalloc.c, line 13.
+info b
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x00007ffff7a7a240 in __GI__IO_file_doallocate at filedoalloc.c:13
+d 2
+b test1.c:13
Breakpoint 3 at 0x4008f1: file test1.c, line 13.
+info b
Num     Type           Disp Enb Address            What
3       breakpoint     keep y   0x00000000004008f1 in main at test1.c:13
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 3, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
335	  pthread_mutex_lock(&mutex);
+n
336	  increaseMallocCalls();
+n
338	  return allocateObject(size);
+p size
$1 = 15
+s
allocateObject (size=15) at MyMalloc.c:119
119	  if (!_initialized)
+p _initialized
$2 = 1
+where
#0  allocateObject (size=15) at MyMalloc.c:119
#1  0x0000000000401170 in malloc (size=15) at MyMalloc.c:338
#2  0x00000000004008fb in main () at test1.c:13
+list
114	 * program
115	 */
116	static void * allocateObject(size_t size)
117	{
118	  // Make sure that allocator is initialized
119	  if (!_initialized)
120	    initialize();
121	
122	  //round up the requested size to the next 8 byte boundary
123	  size_t round_size = (size + 8 - 1) & ~(8 - 1);
+n
123	  size_t round_size = (size + 8 - 1) & ~(8 - 1);
+n
126	  size_t real_size = round_size + sizeof(BoundaryTag) + sizeof(FreeListNode);
+p round_size
$3 = 16
+p real_size
$4 = 4199276
+p sizeof(BoundaryTag)
$5 = 16
+p sizeof(FreeListNode)
$6 = 16
+n
128	  FreeObject * p = _freeList->free_list_node._next;
+p real_szie
No symbol "real_szie" in current context.
+p real_size
$7 = 48
+n
131	  int flag = 0;
+p p
$8 = (FreeObject *) 0x603010
+n
134	  while(p != _freeList){
+p _freeList
$9 = (FreeObject *) 0x6020e0 <_freeListSentinel>
+n
135	  	flag = 0;	
+n
137		size_t obj_size = getSize(&(p->boundary_tag));
+n
140		if(obj_size >= real_size && obj_size < real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
+p obj_size
$10 = 2096064
+p real_szie
No symbol "real_szie" in current context.
+p real_size
$11 = 48
+n
152		else if(obj_size >= real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
+p _freeListSentinel->_next
There is no member named _next.
+p _freeListSentinel._next
There is no member named _next.
+list
147	
148			break;
149		}
150	
151		//the block needs to be split in two
152		else if(obj_size >= real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
153			//update the current block size
154			setSize(&(p->boundary_tag),obj_size - real_size);
155	
156			//set a pointer to where to split
+p p->boundary_tag
$12 = {_objectSizeAndAlloc = 2096064, _leftObjectSize = 0}
+p obj_size
$13 = 2096064
+p real_size
$14 = 48
+make
+run
`/home/u89/wang2226/cs252/lab1-src/test1' has changed; re-reading symbols.
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 3, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
335	  pthread_mutex_lock(&mutex);
+n
336	  increaseMallocCalls();
+n
338	  return allocateObject(size);
+s
allocateObject (size=15) at MyMalloc.c:119
119	  if (!_initialized)
+n
123	  size_t round_size = (size + 8 - 1) & ~(8 - 1);
+n
126	  size_t real_size = round_size + sizeof(BoundaryTag) + sizeof(FreeListNode);
+p real_size
$15 = 4199276
+n
128	  FreeObject * p = _freeList->free_list_node._next;
+p real_size
$16 = 48
+n
131	  int flag = 0;
+n
134	  while(p != _freeList){
+n
135	  	flag = 0;	
+n
137		size_t obj_size = getSize(&(p->boundary_tag));
+n
140		if(obj_size >= real_size && obj_size < real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
+p obj_size
$17 = 2096064
+n
152		else if(obj_size >= real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
+n
154			setSize(&(p->boundary_tag),(obj_size - real_size));
+n
157			char * temp = (char *)p + obj_size - real_size;
+p p->boundary_tag 
$18 = {_objectSizeAndAlloc = 2096016, _leftObjectSize = 0}
+info b
Num     Type           Disp Enb Address            What
3       breakpoint     keep y   0x00000000004008f1 in main at test1.c:13
	breakpoint already hit 1 time
+d 3
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Program received signal SIGSEGV, Segmentation fault.
0x0000000000400c0b in allocateObject (size=15) at MyMalloc.c:162
162			setSize(newChunk,real_size);
+b test1.c:13
Breakpoint 4 at 0x4008f1: file test1.c, line 13.
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 4, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
335	)
+n
336	x);
+n
338	
+list
333	//
334	
335	extern void * malloc(size_t size)
336	{
337	  pthread_mutex_lock(&mutex);
338	  increaseMallocCalls();
339	  
340	  return allocateObject(size);
341	}
342	
+run 
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 4, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
335	)
+list
330	
331	//
332	// C interface
333	//
334	
335	extern void * malloc(size_t size)
336	{
337	  pthread_mutex_lock(&mutex);
338	  increaseMallocCalls();
339	  
+n
336	x);
+n
338	
+n
339	e);
+n
main () at test1.c:14
14	    *p1 = 100;
+quit
