Sat Aug 26 21:30:37 EDT 2017
+b test1.c:13
Breakpoint 1 at 0x4008f1: file test1.c, line 13.
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 1, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
warning: Source file is more recent than executable.
335	  pthread_mutex_lock(&mutex);
+make
+info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000004008f1 in main at test1.c:13
	breakpoint already hit 1 time
+d 1
+run
`/home/u89/wang2226/cs252/lab1-src/test1' has changed; re-reading symbols.
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Program received signal SIGSEGV, Segmentation fault.
0x0000000000400c0b in allocateObject (size=15) at MyMalloc.c:162
162			setSize(newChunk,real_size);
+b test1.c:13
Breakpoint 2 at 0x4008f1: file test1.c, line 13.
+run
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Breakpoint 2, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
335	  pthread_mutex_lock(&mutex);
+n
336	  increaseMallocCalls();
+n
338	  return allocateObject(size);
+s
allocateObject (size=15) at MyMalloc.c:119
119	  if (!_initialized)
+n
123	  size_t round_size = (size + 8 - 1) & ~(8 - 1);
+n
126	  size_t real_size = round_size + sizeof(BoundaryTag) + sizeof(FreeListNode);
+n
128	  FreeObject * p = _freeList->free_list_node._next;
+n
131	  int flag = 0;
+n
134	  while(p != _freeList){
+n
135	  	flag = 0;	
+n
137		size_t obj_size = getSize(&(p->boundary_tag));
+n
140		if(obj_size >= real_size && obj_size < real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
+n
152		else if(obj_size >= real_size + sizeof(BoundaryTag) + sizeof(FreeListNode) + 8){
+p obj_size
$1 = 2096064
+n
154			setSize(&(p->boundary_tag),(obj_size - real_size));
+n
157			char * temp = (char *)p + obj_size - real_size;
+p p->boundary_tag 
$2 = {_objectSizeAndAlloc = 2096016, _leftObjectSize = 0}
+n
161			BoundaryTag * newChunk = (BoundaryTag *)temp;
+p temp
$3 = 0x802ba0 ""
+p p
$4 = (FreeObject *) 0x603010
+p (char *)p
$5 = 0x603010 "\220\373\037"
+p real_size
$6 = 48
+list
156			//set a pointer to where to split
157			char * temp = (char *)p + obj_size - real_size;
158	
159			//new boundary tag
160			//update the size, left object size and allocated bit of newTag
161			BoundaryTag * newChunk = (BoundaryTag *)temp;
162			setSize(newChunk,real_size);
163			newChunk->_leftObjectSize = getSize(&(p->boundary_tag));
164			setAllocated(newChunk,1);
165			
+where
#0  allocateObject (size=15) at MyMalloc.c:161
#1  0x0000000000401170 in malloc (size=15) at MyMalloc.c:338
#2  0x00000000004008fb in main () at test1.c:13
+n
162			setSize(newChunk,real_size);
+n
163			newChunk->_leftObjectSize = getSize(&(p->boundary_tag));
+p newChunk
$7 = (BoundaryTag *) 0x802ba0
+p newChunk->boundary_tag
There is no member named boundary_tag.
+p newChunk->_objectSizeAndAlloc 
$8 = 48
+n
164			setAllocated(newChunk,1);
+p newChunk->_leftObjectSize 
$9 = 2096016
+n
167			temp = temp + real_size;
+n
168			BoundaryTag * rightHeader = (BoundaryTag *)temp;
+p temp
$10 = 0x802bd0 "!\004"
+n
169			rightHeader->_leftObjectSize = getSize(newChunk);
+n
171			p = (FreeObject *)newChunk;
+p rightHeader->_leftObjectSize 
$11 = 48
+n
172			break;
+n
185	  if(flag)
+n
188	  pthread_mutex_unlock(&mutex);
+p flag
$12 = 0
+n
189	  return (void *)((BoundaryTag *)p + 1);
+p (BoundaryTag *)p
$13 = (BoundaryTag *) 0x802ba0
+p ((BoundaryTag *)p + 1)
$14 = (BoundaryTag *) 0x802bb0
+n
190	}
+n
malloc (size=15) at MyMalloc.c:339
339	}
+list
334	{
335	  pthread_mutex_lock(&mutex);
336	  increaseMallocCalls();
337	  
338	  return allocateObject(size);
339	}
340	
341	extern void free(void *ptr)
342	{
343	  pthread_mutex_lock(&mutex);
+n
main () at test1.c:14
14	    *p1 = 100;
+n
12	  for ( i = 0; i < allocations; i++ ) {
+n

Breakpoint 2, main () at test1.c:13
13	    char * p1 = (char *) malloc(15 );
+s
malloc (size=15) at MyMalloc.c:335
335	  pthread_mutex_lock(&mutex);
+n
336	  increaseMallocCalls();
+n
338	  return allocateObject(size);
+s
allocateObject (size=15) at MyMalloc.c:119
119	  if (!_initialized)
+n
123	  size_t round_size = (size + 8 - 1) & ~(8 - 1);
+n
126	  size_t real_size = round_size + sizeof(BoundaryTag) + sizeof(FreeListNode);
+p round_size
$15 = 16
+p real_size
$16 = 48
+n
128	  FreeObject * p = _freeList->free_list_node._next;
+p real_size
$17 = 48
+n
131	  int flag = 0;
+p p
$18 = (FreeObject *) 0x603010
+make
+info b
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x00000000004008f1 in main at test1.c:13
	breakpoint already hit 2 times
+d 2
+run
`/home/u89/wang2226/cs252/lab1-src/test1' has changed; re-reading symbols.
Starting program: /home/u89/wang2226/cs252/lab1-src/test1 

Program received signal SIGSEGV, Segmentation fault.
0x0000000000400c0b in allocateObject (size=15) at MyMalloc.c:162
162			setSize(newChunk,real_size);
+quit
